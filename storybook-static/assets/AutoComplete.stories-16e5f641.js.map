{"version":3,"file":"AutoComplete.stories-16e5f641.js","sources":["../../src/hooks/useDebounce.tsx","../../src/hooks/useClickOutSide.tsx","../../src/ui/AutoComplete/AutoComplete.tsx"],"sourcesContent":["import { useState, useEffect } from \"react\";\n\nexport default function useDebounce(value: any, delay = 300) {\n  const [debounceValue, setDebounceValue] = useState(value);\n  useEffect(() => {\n    const handler = window.setTimeout(() => {\n      setDebounceValue(value);\n    }, delay);\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [value, delay]);\n  return debounceValue;\n}\n","import { RefObject, useEffect } from \"react\";\n\ntype OutsideClickHandler = (event: MouseEvent) => void;\nfunction useClickOutside(\n  ref: RefObject<HTMLElement>,\n  handler: OutsideClickHandler\n) {\n  useEffect(() => {\n    const listener = (event: MouseEvent) => {\n      if (!ref.current || ref.current.contains(event.target as HTMLElement)) {\n        return;\n      }\n      handler(event);\n    };\n    document.addEventListener(\"click\", listener);\n    return () => {\n      document.removeEventListener(\"click\", listener);\n    };\n  }, [ref, handler]);\n}\n\nexport default useClickOutside;\n","import { Input, BaseInputProps } from \"../Input/Input\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport Icon from \"../Icon/Icon\";\nimport useDebounce from \"../../hooks/useDebounce\";\nimport { twMerge } from \"tailwind-merge\";\nimport useClickOutside from \"../../hooks/useClickOutSide\";\n\ninterface DataSourceObject {\n  value: string;\n}\n\n//export type DataSourceType<T = {}> = T & DataSourceObject;\n\nexport type DataSourceType<T = Record<string, never>> = T & DataSourceObject;\n\nexport interface AutoCompleteProps<T = Record<string, never>>\n  extends Omit<BaseInputProps, \"onSelect\"> {\n  /**\n   * A function that takes a string as input and returns an array of suggestions.\n   * @param {string} str - The current value of the input field.\n   * @return {DataSourceType[] | Promise<DataSourceType[]>}\n   * */\n  fetchSuggestions: (\n    str: string\n  ) => DataSourceType<T>[] | Promise<DataSourceType<T>[]>;\n  /**\n   * The callback when a suggestion is selected\n   * */\n  onSelect?: (item: DataSourceType) => void;\n  /**\n   * Custom render function\n   * */\n  // renderOption?: (item: DataSourceType) => React.ReactElement;\n  renderOption?: (item: DataSourceType<T>) => React.ReactElement;\n}\n\n/**\n * React functional component that implements an autocomplete feature.\n *\n * @param {AutoCompleteProps} props - The props object that contains the following properties:\n *   - fetchSuggestions: A function that takes a string as input and returns an array of suggestions.\n *   - value: The current value of the input field.\n *   - onSelect: A function that is called when a suggestion is selected.\n *   - renderOption: A function that takes a suggestion item and returns the JSX to render.\n *   - ...rest: Additional props passed to the component.\n * @return {ReactElement} The rendered autocomplete component.\n */\nexport const AutoComplete: React.FC<AutoCompleteProps> = (props) => {\n  const { fetchSuggestions, value, onSelect, renderOption, ...rest } = props;\n  const [inputValue, setInputValue] = useState((value as string) || \"\");\n  const [suggestions, setSuggestions] = useState<DataSourceType[]>([]);\n  const [loading, setLoading] = useState(false);\n  const debounceValue = useDebounce(inputValue, 500);\n  const [highlightIndex, setHighlightIndex] = useState(-1);\n  const triggerSearch = useRef(false);\n  const componentRef = useRef<HTMLDivElement>(null);\n  useClickOutside(componentRef, () => {\n    setSuggestions([]);\n  });\n\n  useEffect(() => {\n    if (debounceValue && triggerSearch.current) {\n      const results = fetchSuggestions(debounceValue);\n      if (results instanceof Promise) {\n        console.log(\"triggered\");\n        setLoading(true);\n        results.then((data) => {\n          setLoading(false);\n          setSuggestions(data);\n        });\n      } else {\n        setSuggestions(results);\n      }\n    } else {\n      setSuggestions([]);\n    }\n    setHighlightIndex(-1);\n  }, [debounceValue]);\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.trim();\n    setInputValue(value);\n    triggerSearch.current = true;\n  };\n  const handleClick = (item: DataSourceType) => {\n    setInputValue(item.value);\n    setSuggestions([]);\n    onSelect && onSelect(item);\n    triggerSearch.current = false;\n  };\n  const highlight = (index: number) => {\n    if (index < 0) index = 0;\n    if (index >= suggestions.length) {\n      index = suggestions.length - 1;\n    }\n    setHighlightIndex(index);\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLLIElement>) => {\n    switch (e.key) {\n      case \"Enter\":\n        if (suggestions[highlightIndex]) {\n          handleClick(suggestions[highlightIndex]);\n        }\n        break;\n      case \"ArrowUp\":\n        highlight(highlightIndex - 1);\n        break;\n      case \"ArrowDown\":\n        highlight(highlightIndex + 1);\n        break;\n      case \"Escape\":\n        setSuggestions([]);\n        break;\n      default:\n        break;\n    }\n  };\n  const renderTemplate = (item: DataSourceType) => {\n    return renderOption ? renderOption(item) : <div>item</div>;\n  };\n\n  if (\"value\" in props) {\n    delete rest.defaultValue;\n  }\n\n  return (\n    <div ref={componentRef}>\n      <Input\n        value={inputValue}\n        {...rest}\n        onChange={handleChange}\n        onKeyDown={handleKeyDown}\n      />\n      {loading && (\n        <div>\n          <Icon icon=\"spinner\" spin></Icon>\n        </div>\n      )}\n      {suggestions.length > 0 && (\n        <ul>\n          {suggestions.map((item, index) => (\n            <li\n              key={index}\n              onClick={() => handleClick(item)}\n              className={twMerge(\n                index === highlightIndex ? \"bg-slate-200\" : \"\"\n              )}\n            >\n              {renderTemplate(item)}\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n};\n\nexport default AutoComplete;\n"],"names":["useDebounce","value","delay","debounceValue","setDebounceValue","useState","useEffect","handler","useClickOutside","ref","listener","event","AutoComplete","props","fetchSuggestions","onSelect","renderOption","rest","inputValue","setInputValue","suggestions","setSuggestions","loading","setLoading","highlightIndex","setHighlightIndex","triggerSearch","useRef","componentRef","results","data","handleChange","e","value2","handleClick","item","highlight","index","handleKeyDown","renderTemplate","jsx","jsxs","Input","Icon","twMerge"],"mappings":"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"}