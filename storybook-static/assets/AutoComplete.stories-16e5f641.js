import{j as r}from"./jsx-runtime-2ef3df91.js";import{I as P}from"./Input-102b0502.js";import{r as s}from"./index-e03f90b5.js";import{I as J}from"./Icon-54e96bfb.js";import{t as L}from"./tw-merge-1166cefb.js";import{a as b}from"./chunk-AY7I2SME-c7b6cf8a.js";import"./_commonjsHelpers-725317a4.js";import"./index-edafa35b.js";import"./index-2baff29e.js";function U(e,n=300){const[a,o]=s.useState(e);return s.useEffect(()=>{const d=window.setTimeout(()=>{o(e)},n);return()=>{clearTimeout(d)}},[e,n]),a}function X(e,n){s.useEffect(()=>{const a=o=>{!e.current||e.current.contains(o.target)||n(o)};return document.addEventListener("click",a),()=>{document.removeEventListener("click",a)}},[e,n])}const S=e=>{const{fetchSuggestions:n,value:a,onSelect:o,renderOption:d,...v}=e,[y,k]=s.useState(a||""),[c,u]=s.useState([]),[A,x]=s.useState(!1),g=U(y,500),[i,j]=s.useState(-1),f=s.useRef(!1),C=s.useRef(null);X(C,()=>{u([])}),s.useEffect(()=>{if(g&&f.current){const t=n(g);t instanceof Promise?(console.log("triggered"),x(!0),t.then(l=>{x(!1),u(l)})):u(t)}else u([]);j(-1)},[g]);const T=t=>{const l=t.target.value.trim();k(l),f.current=!0},E=t=>{k(t.value),u([]),o&&o(t),f.current=!1},O=t=>{t<0&&(t=0),t>=c.length&&(t=c.length-1),j(t)},z=t=>{switch(t.key){case"Enter":c[i]&&E(c[i]);break;case"ArrowUp":O(i-1);break;case"ArrowDown":O(i+1);break;case"Escape":u([]);break}},G=t=>d?d(t):r.jsx("div",{children:"item"});return"value"in e&&delete v.defaultValue,r.jsxs("div",{ref:C,children:[r.jsx(P,{value:y,...v,onChange:T,onKeyDown:z}),A&&r.jsx("div",{children:r.jsx(J,{icon:"spinner",spin:!0})}),c.length>0&&r.jsx("ul",{children:c.map((t,l)=>r.jsx("li",{onClick:()=>E(t),className:L(l===i?"bg-slate-200":""),children:G(t)},l))})]})};try{S.displayName="AutoComplete",S.__docgenInfo={description:"React functional component that implements an autocomplete feature.",displayName:"AutoComplete",props:{fetchSuggestions:{defaultValue:null,description:`A function that takes a string as input and returns an array of suggestions.
@param str - The current value of the input field.
@return`,name:"fetchSuggestions",required:!0,type:{name:"(str: string) => DataSourceType<Record<string, never>>[] | Promise<DataSourceType<Record<string, never>>[]>"}},onSelect:{defaultValue:null,description:"The callback when a suggestion is selected",name:"onSelect",required:!1,type:{name:"((item: DataSourceType<Record<string, never>>) => void)"}},renderOption:{defaultValue:null,description:"Custom render function",name:"renderOption",required:!1,type:{name:"((item: DataSourceType<Record<string, never>>) => ReactElement<any, string | JSXElementConstructor<any>>)"}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}},disabled:{defaultValue:null,description:"Disable the input",name:"disabled",required:!1,type:{name:"boolean"}},size:{defaultValue:null,description:"Set the size of the input",name:"size",required:!1,type:{name:"enum",value:[{value:'"sm"'},{value:'"lg"'}]}},icon:{defaultValue:null,description:"Set the icon",name:"icon",required:!1,type:{name:"IconProp"}},prepand:{defaultValue:null,description:"Set the prepand content",name:"prepand",required:!1,type:{name:"string | ReactElement<any, string | JSXElementConstructor<any>>"}},append:{defaultValue:null,description:"Set the append content",name:"append",required:!1,type:{name:"string | ReactElement<any, string | JSXElementConstructor<any>>"}}}}}catch{}const ue={title:"UI/AutoComplete",component:S,parameters:{layout:"centered"},tags:["autodocs"]},K=["bradley","pope","caruso","cook","cousins","james","AD","green","howard","kuzma","McGee","rando"],M=e=>K.filter(n=>n.includes(e)).map(n=>({value:n})),H=e=>r.jsxs("h2",{children:["Name:",e.value]}),p={args:{fetchSuggestions:M,onSelect:b("selected"),renderOption:H}},W=[{value:"bradley",number:11},{value:"pope",number:1},{value:"caruso",number:4},{value:"cook",number:2},{value:"cousins",number:15},{value:"james",number:23},{value:"AD",number:3},{value:"green",number:14},{value:"howard",number:39},{value:"kuzma",number:0}],$=e=>W.filter(n=>n.value.includes(e)),B=e=>r.jsxs(r.Fragment,{children:[r.jsxs("h2",{children:["Name:",e.value]}),r.jsxs("p",{children:["Number:",e.number]})]}),m={fetchSuggestions:$,onSelect:b("selected"),renderOption:B,placeholder:"Enter the name of lakers"},Q=e=>fetch(`https://api.github.com/search/users?q=${e}`).then(n=>n.json()).then(({items:n})=>n.slice(0,10).map(a=>({value:a.login,...a}))),Y=e=>r.jsxs(r.Fragment,{children:[r.jsxs("h2",{children:["Name:",e.value]}),r.jsxs("p",{children:["Url:",e.url]})]}),h={fetchSuggestions:Q,onSelect:b("selected"),renderOption:Y,placeholder:"Github username"};var V,D,w;p.parameters={...p.parameters,docs:{...(V=p.parameters)==null?void 0:V.docs,source:{originalSource:`{
  args: {
    fetchSuggestions: handleFetch,
    onSelect: action("selected"),
    renderOption: renderOption
  }
}`,...(w=(D=p.parameters)==null?void 0:D.docs)==null?void 0:w.source}}};var R,q,F;m.parameters={...m.parameters,docs:{...(R=m.parameters)==null?void 0:R.docs,source:{originalSource:`{
  fetchSuggestions: handleComplexFetch,
  onSelect: action("selected"),
  renderOption: renderComplexOption,
  placeholder: "Enter the name of lakers"
}`,...(F=(q=m.parameters)==null?void 0:q.docs)==null?void 0:F.source}}};var I,N,_;h.parameters={...h.parameters,docs:{...(I=h.parameters)==null?void 0:I.docs,source:{originalSource:`{
  fetchSuggestions: handlePromiseFetch,
  onSelect: action("selected"),
  renderOption: renderGithubOption,
  placeholder: "Github username"
}`,...(_=(N=h.parameters)==null?void 0:N.docs)==null?void 0:_.source}}};const le=["Default","CustomSuggestions","FetchOptions"];export{m as CustomSuggestions,p as Default,h as FetchOptions,le as __namedExportsOrder,ue as default};
//# sourceMappingURL=AutoComplete.stories-16e5f641.js.map
